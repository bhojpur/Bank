// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServiceClient interface {
	// StartLocalBranch starts a Branch on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the bank/config.yaml
	//   3. all bytes constituting the Branch YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalBranch(ctx context.Context, opts ...grpc.CallOption) (BankService_StartLocalBranchClient, error)
	// StartFromPreviousBranch starts a new Branch based on a previous one.
	// If the previous Branch does not have the can-replay condition set this call will result in an error.
	StartFromPreviousBranch(ctx context.Context, in *StartFromPreviousBranchRequest, opts ...grpc.CallOption) (*StartBranchResponse, error)
	// StartBranchRequest starts a new Branch based on its specification.
	StartBranch(ctx context.Context, in *StartBranchRequest, opts ...grpc.CallOption) (*StartBranchResponse, error)
	// Searches for Branch known to this instance
	ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*ListBranchResponse, error)
	// Subscribe listens to new Branch updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BankService_SubscribeClient, error)
	// GetBranch retrieves details of a single Branch
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error)
	// Listen listens to Branch updates and log output of a running Branch
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (BankService_ListenClient, error)
	// StopBranch stops a currently running Branch
	StopBranch(ctx context.Context, in *StopBranchRequest, opts ...grpc.CallOption) (*StopBranchResponse, error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) StartLocalBranch(ctx context.Context, opts ...grpc.CallOption) (BankService_StartLocalBranchClient, error) {
	stream, err := c.cc.NewStream(ctx, &BankService_ServiceDesc.Streams[0], "/v1.BankService/StartLocalBranch", opts...)
	if err != nil {
		return nil, err
	}
	x := &bankServiceStartLocalBranchClient{stream}
	return x, nil
}

type BankService_StartLocalBranchClient interface {
	Send(*StartLocalBranchRequest) error
	CloseAndRecv() (*StartBranchResponse, error)
	grpc.ClientStream
}

type bankServiceStartLocalBranchClient struct {
	grpc.ClientStream
}

func (x *bankServiceStartLocalBranchClient) Send(m *StartLocalBranchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bankServiceStartLocalBranchClient) CloseAndRecv() (*StartBranchResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartBranchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bankServiceClient) StartFromPreviousBranch(ctx context.Context, in *StartFromPreviousBranchRequest, opts ...grpc.CallOption) (*StartBranchResponse, error) {
	out := new(StartBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.BankService/StartFromPreviousBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) StartBranch(ctx context.Context, in *StartBranchRequest, opts ...grpc.CallOption) (*StartBranchResponse, error) {
	out := new(StartBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.BankService/StartBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*ListBranchResponse, error) {
	out := new(ListBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.BankService/ListBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BankService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &BankService_ServiceDesc.Streams[1], "/v1.BankService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &bankServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BankService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type bankServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *bankServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bankServiceClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error) {
	out := new(GetBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.BankService/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (BankService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &BankService_ServiceDesc.Streams[2], "/v1.BankService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &bankServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BankService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type bankServiceListenClient struct {
	grpc.ClientStream
}

func (x *bankServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bankServiceClient) StopBranch(ctx context.Context, in *StopBranchRequest, opts ...grpc.CallOption) (*StopBranchResponse, error) {
	out := new(StopBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.BankService/StopBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServiceServer is the server API for BankService service.
// All implementations must embed UnimplementedBankServiceServer
// for forward compatibility
type BankServiceServer interface {
	// StartLocalBranch starts a Branch on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the bank/config.yaml
	//   3. all bytes constituting the Branch YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalBranch(BankService_StartLocalBranchServer) error
	// StartFromPreviousBranch starts a new Branch based on a previous one.
	// If the previous Branch does not have the can-replay condition set this call will result in an error.
	StartFromPreviousBranch(context.Context, *StartFromPreviousBranchRequest) (*StartBranchResponse, error)
	// StartBranchRequest starts a new Branch based on its specification.
	StartBranch(context.Context, *StartBranchRequest) (*StartBranchResponse, error)
	// Searches for Branch known to this instance
	ListBranch(context.Context, *ListBranchRequest) (*ListBranchResponse, error)
	// Subscribe listens to new Branch updates
	Subscribe(*SubscribeRequest, BankService_SubscribeServer) error
	// GetBranch retrieves details of a single Branch
	GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error)
	// Listen listens to Branch updates and log output of a running Branch
	Listen(*ListenRequest, BankService_ListenServer) error
	// StopBranch stops a currently running Branch
	StopBranch(context.Context, *StopBranchRequest) (*StopBranchResponse, error)
	mustEmbedUnimplementedBankServiceServer()
}

// UnimplementedBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankServiceServer struct {
}

func (UnimplementedBankServiceServer) StartLocalBranch(BankService_StartLocalBranchServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalBranch not implemented")
}
func (UnimplementedBankServiceServer) StartFromPreviousBranch(context.Context, *StartFromPreviousBranchRequest) (*StartBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousBranch not implemented")
}
func (UnimplementedBankServiceServer) StartBranch(context.Context, *StartBranchRequest) (*StartBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBranch not implemented")
}
func (UnimplementedBankServiceServer) ListBranch(context.Context, *ListBranchRequest) (*ListBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranch not implemented")
}
func (UnimplementedBankServiceServer) Subscribe(*SubscribeRequest, BankService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBankServiceServer) GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (UnimplementedBankServiceServer) Listen(*ListenRequest, BankService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedBankServiceServer) StopBranch(context.Context, *StopBranchRequest) (*StopBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBranch not implemented")
}
func (UnimplementedBankServiceServer) mustEmbedUnimplementedBankServiceServer() {}

// UnsafeBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServiceServer will
// result in compilation errors.
type UnsafeBankServiceServer interface {
	mustEmbedUnimplementedBankServiceServer()
}

func RegisterBankServiceServer(s grpc.ServiceRegistrar, srv BankServiceServer) {
	s.RegisterService(&BankService_ServiceDesc, srv)
}

func _BankService_StartLocalBranch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BankServiceServer).StartLocalBranch(&bankServiceStartLocalBranchServer{stream})
}

type BankService_StartLocalBranchServer interface {
	SendAndClose(*StartBranchResponse) error
	Recv() (*StartLocalBranchRequest, error)
	grpc.ServerStream
}

type bankServiceStartLocalBranchServer struct {
	grpc.ServerStream
}

func (x *bankServiceStartLocalBranchServer) SendAndClose(m *StartBranchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bankServiceStartLocalBranchServer) Recv() (*StartLocalBranchRequest, error) {
	m := new(StartLocalBranchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BankService_StartFromPreviousBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).StartFromPreviousBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BankService/StartFromPreviousBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).StartFromPreviousBranch(ctx, req.(*StartFromPreviousBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_StartBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).StartBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BankService/StartBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).StartBranch(ctx, req.(*StartBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).ListBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BankService/ListBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).ListBranch(ctx, req.(*ListBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BankServiceServer).Subscribe(m, &bankServiceSubscribeServer{stream})
}

type BankService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type bankServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *bankServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BankService_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BankService/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BankServiceServer).Listen(m, &bankServiceListenServer{stream})
}

type BankService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type bankServiceListenServer struct {
	grpc.ServerStream
}

func (x *bankServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BankService_StopBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).StopBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BankService/StopBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).StopBranch(ctx, req.(*StopBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankService_ServiceDesc is the grpc.ServiceDesc for BankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousBranch",
			Handler:    _BankService_StartFromPreviousBranch_Handler,
		},
		{
			MethodName: "StartBranch",
			Handler:    _BankService_StartBranch_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _BankService_ListBranch_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _BankService_GetBranch_Handler,
		},
		{
			MethodName: "StopBranch",
			Handler:    _BankService_StopBranch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalBranch",
			Handler:       _BankService_StartLocalBranch_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _BankService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _BankService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bank.proto",
}
